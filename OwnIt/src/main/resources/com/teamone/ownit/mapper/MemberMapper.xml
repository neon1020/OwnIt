<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.teamone.ownit.mapper.MemberMapper">

<!-- 정채연 --> 

<!-- 회원가입 : 이메일 중복 체크 -->
<select id="selectEmail" parameterType="String" resultType="Integer">
	SELECT COUNT(*) FROM member WHERE member_id = #{email}
</select>

<!-- 회원가입 : 닉네임 중복 체크 -->
<select id="selectNickname" parameterType="String" resultType="Integer">
	SELECT COUNT(*) FROM member WHERE member_nickname = #{nickname}
</select>

<!-- 회원가입 : 회원가입 작업 수행 (member 테이블) -->
<insert id="insertMember">
	INSERT INTO member
	VALUES (
		null,
		#{member_id},
		#{member_passwd},
		#{member_name},
		#{member_nickname},
		#{member_phone},
		'profile_default.png',
		DATE_FORMAT(NOW(), '%y-%m-%d'),
		'0',
		#{member_agree}
	)
</insert>

<!-- 회원가입 : 회원가입 작업 수행 (address 테이블) -->
<insert id="insertAddress">
	<selectKey keyProperty="se_member_idx" resultType="Integer" order="BEFORE">
		SELECT MAX(member_idx) FROM member
	</selectKey>
	INSERT INTO address
	VALUES (
		null,
		#{se_member_idx},
		#{address.address_zipcode},
		#{address.address1},
		#{address.address2},
		'0',
		'주소',
		#{member.member_name}
	)
</insert>

<!-- 회원가입 : 회원가입 작업 수행 (image 테이블) -->
<insert id="insertImage">
	<selectKey keyProperty="member_idx" resultType="Integer" order="BEFORE">
		SELECT MAX(member_idx) FROM member
	</selectKey>
	INSERT INTO image
	VALUES (
		null,
		null,
		null,
		#{member_idx},
		'member',
		'profile_default.png',
		'profile_default.png',
		null,
		null,
		null,
		null
	)
</insert>

<!-- member_idx 값 얻어오기 -->
<select id="selectMember_idx" parameterType="String" resultType="Integer">
	SELECT member_idx FROM member WHERE member_id = #{id}
</select>

<!-- 회원가입 : 회원 인증 정보 유무 확인 -->
<select id="selectAuthCode" resultType="Integer">
	SELECT count(*) FROM auth_info WHERE member_idx = #{member_idx}
</select>

<!-- 회원가입 : 회원 인증 정보 신규 저장(auth_info 테이블) -->
<insert id="insertAuthCode">
	INSERT INTO auth_info
	VALUES (
		#{member_idx},
		#{auth_code}
	)
</insert>

<!-- 회원가입 : 기존 회원 인증 정보 덮어쓰기(auth_info 테이블) -->
<update id="updateAuthCode">
	UPDATE auth_info
		SET
			auth_code = #{auth_code}
		WHERE
			member_idx = #{member_idx}
</update>

<!-- 회원가입 : 회원 인증 정보 가져오기 -->
<select id="selectAuthInfo" resultType="Integer">
	SELECT count(*) FROM auth_info
	WHERE
		member_idx = #{member_idx}
		AND
		auth_code = #{auth_code}
</select>

<!-- 회원가입 : 회원 인증 여부 변경(0 -> 1) -->
<update id="updateAuthInfo">
	UPDATE member
		SET
			member_auth_gb = 1
		WHERE
			member_idx = #{member_idx}
</update>

<!-- 회원가입 : 회원 인증 정보 삭제 -->
<delete id="deleteAuthInfo">
	DELETE
		FROM auth_info
		WHERE
			member_idx = #{member_idx}
</delete>

<!-- 로그인 : 아이디, 비밀번호 일치 여부 확인 -->
<select id="selectPasswd" resultType="String">
	SELECT member_passwd FROM member WHERE member_id = #{member_id}
</select>

<!-- 멤버 1명의 정보 가져오기 (리턴타입 : MemberVO) -->
<select id="selectMember" resultType="com.teamone.ownit.vo.MemberVO">
	SELECT * FROM member WHERE member_id = #{member_id}
</select>

<!-- 멤버 1명의 정보 가져오기 (리턴타입 : Int) -->
<select id="selectMember2" parameterType="String" resultType="Integer">
	SELECT COUNT(*) FROM member WHERE member_id = #{member_id}
</select>

<!-- 멤버 1명의 메일 인증 유무 검사 -->
<select id="selectAuthStatus" resultType="Integer">
	SELECT COUNT(*)
		FROM member
		WHERE
			member_id = #{member_id}
			AND
		 	member_auth_gb = '1'
</select>

<!-- 회원 탈퇴 -->
<delete id="deleteMember">
	DELETE FROM member WHERE member_id=#{member_id}
</delete>

<!-- 비밀번호 찾기 시 member 테이블에 새로운 비밀번호 등록 -->
<update id="updatePasswd">
	UPDATE member
		SET
			member_passwd = #{secureNewPassword}
		WHERE
			member_id = #{member_id}
</update>





























































































































































	<!-- 류혜지 -->
	<!-- 이메일찾기 -->
	<select id="findEmail" resultType="com.teamone.ownit.vo.MemberVO">
		SELECT * FROM member
			WHERE 
				member_phone=#{member_phone}
	</select>



</mapper> 
