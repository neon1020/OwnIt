<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.teamone.ownit.mapper.MypageMapper">

	<!-- 류혜지 -->
	
	<!-- 회원정보 조회	 -->
	<select id="selectMemberInfo" resultType="com.teamone.ownit.vo.MypageVO">
		SELECT 
			i.image_real_file1, m.member_id, m.member_nickname, m.member_name,
			m.member_image, m.member_phone, a.address_zipcode, a.address1, a.address2   	 
				FROM member m
					LEFT JOIN address a
						ON a.address_idx = m.member_idx
					LEFT JOIN image i
						ON m.member_idx = i.member_idx
				WHERE member_id=#{member_id}
	</select>	
    
    <!-- 비밀번호 조회 -->	
	<select id="selectPasswd" resultType="String">
		SELECT member_passwd 
			FROM member
			WHERE member_id=#{sId}
	</select>
	
	<!-- 비밀번호 변경 -->    
	<update id="updateMember">
		UPDATE member
			SET
				member_passwd = #{secureNewPassword}
			WHERE 
				member_id = #{member.member_id}
	</update>
	
	<!-- 프로필 정보 불러오기	 -->
	<select id="selectProfile" resultType="com.teamone.ownit.vo.MypageVO">
		SELECT 
			i.image_real_file1, m.member_id, m.member_nickname
				FROM member m
					LEFT JOIN image i
						ON m.member_idx = i.member_idx
				WHERE m.member_idx=#{member_idx}
	</select>		
	
	<!-- 프로필 정보 수정하기(사진)	 -->
	<update id="updateProfile">
	   UPDATE image
	     SET
	       image_real_file1 = #{image_real_file1}, 
	       image_original_file1 = #{image_original_file1}
	     WHERE
	       member_idx = #{member_idx}            
	</update>		
	
	<!-- 프로필 정보 수정하기(닉네임)	 -->		
    <update id="updateNickname">
	    UPDATE member
	      SET
	        member_nickname = #{member_nickname}
	      WHERE
	        member_idx = #{member_idx}
    </update>		
	
	<!-- 마이페이지 메인 - 프로필 -->	
	<select id="selectMainProfile" resultType="com.teamone.ownit.vo.MypageMainVO">	
		SELECT
			m.member_idx, m.member_id, m.member_nickname, i.image_real_file1
				FROM member m
					LEFT JOIN image i
						ON m.member_idx = i.member_idx
				WHERE m.member_idx=#{member_idx}
	</select>
	
	<!-- 마이페이지 메인 - 구매내역 -->	
	<select id="selectMainOrder" resultType="com.teamone.ownit.vo.MypageMainVO">
		SELECT 
			m.member_idx, i.image_real_file1, p.product_idx, p.product_name, p.product_buy_price, 
			ob.order_buy_idx, ob.order_buy_date, ob.order_buy_gb
				FROM order_buy ob
					LEFT JOIN image i
						ON ob.product_idx = i.product_idx
					LEFT JOIN member m
						ON ob.member_idx = m.member_idx
					LEFT JOIN product p
						ON ob.product_idx = p.product_idx	
				WHERE ob.member_idx=#{member_idx}
				ORDER BY 
					ob.order_buy_date DESC
				LIMIT 3
	</select>	
    
	<!-- 마이페이지 메인 - 판매내역 -->	
	<select id="selectMainSell" resultType="com.teamone.ownit.vo.MypageMainVO">	
		SELECT 
			m.member_idx, i.image_real_file1, p.product_idx, p.product_name, p.product_sell_price, 
			os.order_sell_idx, os.order_sell_date, os.order_sell_gb
				FROM order_sell os
					LEFT JOIN image i
						ON os.product_idx = i.product_idx
					LEFT JOIN member m
						ON os.member_idx = m.member_idx
					LEFT JOIN product p
						ON os.product_idx = p.product_idx	
				WHERE os.member_idx=#{member_idx}
				ORDER BY 
					os.order_sell_date DESC
				LIMIT 3	
	</select>		    
	    
	<!-- 마이페이지 메인 - 위시리스트 -->	    
	<select id="selectMainWish" resultType="com.teamone.ownit.vo.MypageMainVO">	
		SELECT 
			m.member_idx, m.member_id, p.product_idx, p.product_name, i.image_real_file1
				FROM wishlist w
					LEFT JOIN member m
						ON w.member_idx = m.member_idx
					LEFT JOIN product p
						ON w.product_idx = p.product_idx	
					LEFT JOIN image i
						ON w.product_idx = i.product_idx	
				WHERE w.member_idx=#{member_idx}
				LIMIT 6		
	</select>		
	
	<!-- 판매내역 목록 -->
	<select id="selectMySell" resultType="com.teamone.ownit.vo.MypageSellListVO">
		SELECT 
			o.member_idx, i.image_real_file1, o.product_idx, p.product_name, 
			p.product_sell_price, o.order_sell_idx, o.order_sell_gb,
			date_format(o.order_sell_date, '%y-%m-%d') order_sell_date
				FROM order_sell o
					LEFT JOIN image i
						ON o.product_idx = i.product_idx
					LEFT JOIN product p
						ON o.product_idx = p.product_idx	
				WHERE o.member_idx=#{member_idx}
				<if test="!date1.equals('') and !date2.equals('')">
					AND
					date_format(str_to_date(o.order_sell_date, '%Y-%m-%d'), '%y-%m-%d') <![CDATA[>=]]> date_format(str_to_date(#{date1}, '%Y-%m-%d'), '%y-%m-%d')
					AND
					date_format(str_to_date(o.order_sell_date, '%Y-%m-%d'), '%y-%m-%d') <![CDATA[<=]]> date_format(str_to_date(#{date2}, '%Y-%m-%d'), '%y-%m-%d')
				</if>
				ORDER BY
						date_format(str_to_date(o.order_sell_date, '%Y-%m-%d'), '%y-%m-%d') DESC
					LIMIT #{startRow}, #{listLimit}
	</select>

  <!-- 판매내역 갯수 조회 -->
	<select id="selectMySellListCount" resultType="integer">
		SELECT 
			COUNT(*) 
				FROM order_sell o
					LEFT JOIN image i
						ON o.product_idx = i.product_idx
					LEFT JOIN member m
						ON o.member_idx = m.member_idx
					LEFT JOIN product p
						ON o.product_idx = p.product_idx	
				WHERE o.member_idx=#{member_idx}
				<if test="!date1.equals('') and !date2.equals('')">
					AND
					date_format(str_to_date(order_sell_date, '%Y-%m-%d'), '%y-%m-%d') <![CDATA[>=]]> date_format(str_to_date(#{date1}, '%Y-%m-%d'), '%y-%m-%d')
					AND
					date_format(str_to_date(order_sell_date, '%Y-%m-%d'), '%y-%m-%d') <![CDATA[<=]]> date_format(str_to_date(#{date2}, '%Y-%m-%d'), '%y-%m-%d')
				</if>			
	</select>	
    
	<!-- 위시리스트 목록 -->	
	<select id="selectWishlist" resultType="com.teamone.ownit.vo.WishlistVO">
		SELECT 
			m.member_idx, m.member_id, p.product_idx, p.product_name, i.image_real_file1
				FROM wishlist w
					LEFT JOIN member m
						ON w.member_idx = m.member_idx
					LEFT JOIN product p
						ON w.product_idx = p.product_idx	
					LEFT JOIN image i
						ON w.product_idx = i.product_idx	
				WHERE w.member_idx=#{member_idx}
				LIMIT #{startRow}, #{listLimit}				
	</select>
    
	<!-- 위시리스트 갯수 조회 -->	    
	<select id="selectWishlistCount" resultType="integer">
		SELECT COUNT(*) 
			FROM wishlist w
				LEFT JOIN member m
					ON w.member_idx = m.member_idx
				LEFT JOIN product p
					ON w.product_idx = p.product_idx	
				LEFT JOIN image i
					ON w.product_idx = i.product_idx
			WHERE w.member_idx=#{member_idx}
	</select>
	
	<!-- 장바구니에 존재하는지 확인 -->	 
	<select id="isContainedInCart" resultType="int">
		SELECT COUNT(*)
			FROM cart 
			WHERE 
				member_idx = #{member_idx} 
				AND 
				product_idx = #{product_idx}
	</select>

	<!-- 장바구니 추가 -->	 
	<insert id="addToCart">
		INSERT INTO cart
			VALUES(
				#{member_idx}, 
				#{product_idx}, 
				1, 
				sysdate()
				)
	</insert>	
	
	<!-- 위시리스트 삭제 -->
	<delete id="deleteWishlist">
		DELETE FROM wishlist
			WHERE 
				member_idx = #{member_idx}
				AND 
				product_idx = #{product_idx}
	</delete>
	
	<!-- 주소록 목록 -->	
	<select id="selectAddress" resultType="com.teamone.ownit.vo.AddressVO">
		SELECT 
			m.member_idx, m.member_id, a.address_idx, a.address_zipcode,
			a.address1, a.address2, a.address_recipient, a.address_gb, a.address_nickname
				FROM address a
					LEFT JOIN member m
						ON a.member_idx = m.member_idx
				WHERE m.member_idx=#{member_idx}
	</select>

	<!-- 주소록 갯수 조회 -->
	<select id="selectAddressCount" resultType="integer">
		SELECT COUNT(*) 
			FROM address
			WHERE member_idx=#{member_idx}
	</select>

	<!-- 주소록 추가 -->
	<insert id="insertAddress">
		insert into address
			values(
				null,
				#{member_idx},
				#{address.address_zipcode},
				#{address.address1},
				#{address.address2},
				'1',
				#{address.address_nickname},
				#{address.address_recipient}
				)
	</insert>
	
	<!-- 주소록 수정 -->
	<update id="updateAddress">
		UPDATE address
			SET
				address_zipcode = #{address_zipcode},
				address1 = #{address1},
				address2 = #{address2},
				address_nickname = #{address_nickname},
				address_recipient = #{address_recipient}
			WHERE
				address_idx = #{address_idx}
	</update>
	
	<!-- 주소록 대표 배송지 설정 -->
	<update id="defaultAddress">
		UPDATE address
			SET
				address_gb = '0'
			WHERE
				member_idx = #{member_idx}
				AND
				address_idx = #{address_idx}
	</update>

	<!-- 주소록 대표 배송지 설정 -->
	<update id="otherAddress">
		UPDATE address
			SET
				address_gb = '1'
			WHERE
				member_idx = #{member_idx}
	</update>

	<!-- 주소록 삭제 -->
	<delete id="deleteAddress">
		DELETE
			FROM address
			WHERE 
				address_idx = #{address_idx}
	</delete>







































































































<!-- 정채연 400 -->

<!-- 계좌 관리 : 해당 회원의 총 계좌 갯수 구하기 -->
<select id="selectAccountCount" resultType="Integer">
	SELECT COUNT(*) FROM account WHERE member_idx = #{member_idx}
</select>

<!-- 계좌 관리 : 계좌 추가 작업 수행 -->
<insert id="insertAccount">
	<selectKey keyProperty="isMain" resultType="Integer" order="BEFORE">
		SELECT COUNT(account_gb) FROM account
			WHERE
			member_idx = #{member_idx}
			AND
			account_gb = 0
	</selectKey>
	INSERT INTO account
	VALUES (
		NULL,
		#{member_idx},
		#{account.account_bank},
		#{account.account_num},
		#{account.account_owner_name},
		<if test="accountCount == 0">
			'0',
		</if>
		<if test="accountCount > 0">
			<choose>
				<when test="isMain == 0">
					'0',
				</when>
				<when test="isMain > 0">
					'1',
				</when>
			</choose>
		</if>
		#{account.account_nickname}
	)
</insert>

<!-- 계좌 관리 : 해당 회원의 계좌 목록 가져오기 -->
<select id="selectAccountList" resultType="com.teamone.ownit.vo.AccountVO">
	SELECT * FROM account
	WHERE
		member_idx = #{member_idx}
	ORDER BY account_gb
</select>

<!-- 계좌 관리 : 계좌 정보 수정 -->
<update id="updateAccount">
	UPDATE account
		SET
			account_bank = #{account_bank},
			account_num = #{account_num},
			account_owner_name = #{account_owner_name},
			account_nickname = #{account_nickname}
		WHERE
			account_idx = #{account_idx}
</update>

<!-- 계좌 관리 : 계좌 삭제 -->
<delete id="deleteAccount">
	DELETE
		FROM account
		WHERE
			account_idx = #{account_idx}
</delete>

<!-- 계좌 관리 : 기본 계좌 설정 -->
<update id="defaultAccount">
	UPDATE account
		SET
			account_gb = '0'
		WHERE
			member_idx = #{member_idx}
			AND
			account_idx = #{account_idx}
</update>

<!-- 계좌 관리 : 기본 계좌 설정 전 전체 나머지 계좌로 설정 -->
<update id="otherAccount">
	UPDATE account
		SET
			account_gb = '1'
		WHERE
			member_idx = #{member_idx}
</update>

<!-- 구매내역 : 해당 회원의 전체 구매내역 불러오기 -->
<select id="selectOrderList" resultType="com.teamone.ownit.vo.Order_buyMyVO">
	SELECT
		o.order_buy_idx, o.product_idx, o.member_idx, o.order_buy_gb,
		date_format(o.order_buy_date, '%y-%m-%d') order_buy_date,
		i.image_real_file1, p.product_name, p.product_buy_price
	FROM order_buy o
	LEFT JOIN image i
		ON o.product_idx = i.product_idx
	LEFT JOIN product p
		ON o.product_idx = p.product_idx
	
	WHERE o.member_idx = #{member_idx}
	<if test="!date1.equals('') and !date2.equals('')">
			AND
			date_format(str_to_date(o.order_buy_date, '%Y-%m-%d'), '%y-%m-%d') <![CDATA[>=]]> date_format(str_to_date(#{date1}, '%Y-%m-%d'), '%y-%m-%d')
			AND
			date_format(str_to_date(o.order_buy_date, '%Y-%m-%d'), '%y-%m-%d') <![CDATA[<=]]> date_format(str_to_date(#{date2}, '%Y-%m-%d'), '%y-%m-%d')
	</if>
	ORDER BY
			date_format(str_to_date(o.order_buy_date, '%Y-%m-%d'), '%y-%m-%d') DESC
		LIMIT #{startRow}, #{listLimit}
</select>

<!-- 구매내역 : 해당 회원의 전체 구매내역 갯수 구하기 -->
<select id="selectOrderListCount" resultType="Integer">
	SELECT COUNT(*) FROM order_buy
	WHERE member_idx = #{member_idx}
	<if test="!date1.equals('') and !date2.equals('')">
			AND
			date_format(str_to_date(order_buy_date, '%Y-%m-%d'), '%y-%m-%d') <![CDATA[>=]]> date_format(str_to_date(#{date1}, '%Y-%m-%d'), '%y-%m-%d')
			AND
			date_format(str_to_date(order_buy_date, '%Y-%m-%d'), '%y-%m-%d') <![CDATA[<=]]> date_format(str_to_date(#{date2}, '%Y-%m-%d'), '%y-%m-%d')
	</if>
</select>

<!-- 구매내역 : 구매확정 시 order_buy_gb 컬럼값 변경(2 -> 3) -->
<update id="updateOrderBuyGb">
	UPDATE order_buy
		SET
			order_buy_gb = '3'
		WHERE
			member_idx = #{member_idx}
			AND
			order_buy_idx = #{order_buy_idx}
</update>

<!-- 구매내역 : 작성한 리뷰 보러 가기 전 해당 리뷰 존재 여부 확인 -->
<select id="selectReview" resultType="com.teamone.ownit.vo.ReviewVO">
	SELECT * FROM review
	WHERE
		product_idx = #{product_idx}
		AND
		member_idx = #{member_idx}
</select>


</mapper> 
